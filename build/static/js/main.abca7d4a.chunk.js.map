{"version":3,"sources":["Image.js","Gallery.js","TempGen.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","setState","state","React","createRef","this","addEventListener","style","gridRowEnd","ref","src","image","url","alt","name","id","onClick","e","handleclick","Component","Gallery","className","handleRandom","images","map","key","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topX","topY","bottomX","bottomY","TempGen","getStateObj","type","rect","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","changeText","event","currentTarget","value","resizeText","handleMouseDown","document","handleMouseMove","handleMouseUp","removeEventListener","saveMeme","getElementById","length","svg","resetBoxes","fontSize","currentWidth","textLength","baseVal","imageWidth","meme","width","newHeight","textStyle","fontFamily","textTransform","fill","stroke","userSelect","toggleSelected","el","svgRef","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","placeholder","onChange","App","selected","selectedImg","handleImgClick","find","i","target","chooseRandom","floor","random","toggleComponent","fetch","then","r","json","data","memes","filter","box_count","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wSACqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,SAAW,WACT,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAC/BC,EAAQC,KAAKC,KAAKN,EAAS,GAAK,GACtC,EAAKO,SAAS,CAAEH,WAbhB,EAAKI,MAAQ,CACXJ,MAAO,GAET,EAAKH,SAAWQ,IAAMC,YALL,E,gEASjBC,KAAKV,SAASC,QAAQU,iBAAiB,OAAQD,KAAKZ,Y,+BAS5C,IAAD,OACP,OACE,yBAAKc,MAAO,CAAEC,WAAW,QAAD,OAAUH,KAAKH,MAAMJ,SAC3C,yBACEW,IAAKJ,KAAKV,SACVe,IAAKL,KAAKb,MAAMmB,MAAMC,IACtBC,IAAKR,KAAKb,MAAMmB,MAAMG,KACtBC,GAAIV,KAAKb,MAAMmB,MAAMI,GACrBC,QAAS,SAACC,GAAD,OAAO,EAAKzB,MAAM0B,YAAYD,W,GA3Bdd,IAAMgB,WCGpBC,G,6KACT,IAAD,OACP,OACE,6BACE,yBAAKC,UAAU,MAAf,cAIA,6BACE,4BAAQA,UAAU,cAAcL,QAAS,kBAAM,EAAKxB,MAAM8B,iBAA1D,gBAGF,yBAAKD,UAAU,cACZhB,KAAKb,MAAM+B,OAAOC,KAAI,SAACb,GACtB,OACE,kBAAC,EAAD,CACEc,IAAKd,EAAMI,GACXJ,MAAOA,EACPO,YAAa,EAAK1B,MAAM0B,uB,GAlBHC,c,6BCA/BO,EAAe,CACjBC,QAAS,GACTC,WAAY,GACZC,eAAe,EACfC,kBAAkB,EAClBC,KAAM,MACNC,KAAM,MACNC,QAAS,MACTC,QAAS,OA6MEC,E,kDAzMX,aAAe,IAAD,8BACV,gBAMJC,YAAc,SAACnB,EAAGoB,GACd,IAAIC,EAAO,EAAK3C,SAAS4C,wBACnBC,EAAUvB,EAAEwB,QAAUH,EAAKI,KAC3BC,EAAU1B,EAAE2B,QAAUN,EAAKO,IAC7BC,EAAW,GAgBf,MAfa,WAATT,EACAS,EAAW,CACPhB,kBAAkB,EAClBD,eAAe,EACfI,QAAQ,GAAD,OAAKO,EAAL,MACPN,QAAQ,GAAD,OAAKS,EAAL,OAEK,QAATN,IACPS,EAAW,CACPjB,eAAe,EACfC,kBAAkB,EAClBC,KAAK,GAAD,OAAKS,EAAL,MACJR,KAAK,GAAD,OAAKW,EAAL,QAGLG,GA3BG,EA8BdC,WAAa,SAACC,GACV,EAAK/C,SAAL,eACK+C,EAAMC,cAAclC,GAAKiC,EAAMC,cAAcC,QAElD,IAAIb,EAAOW,EAAMC,cAAcnC,KAC/B,EAAKqC,WAAWd,IAnCN,EAsCde,gBAAkB,SAACnC,EAAGoB,GAClB,IAAMS,EAAW,EAAKV,YAAYnB,EAAGoB,GACrCgB,SAAS/C,iBAAiB,aAAa,SAAC0C,GAAD,OACnC,EAAKM,gBAAgBN,EAAOX,MAEhC,EAAKpC,SAAL,eACO6C,KA5CG,EAgDdQ,gBAAkB,SAACrC,EAAGoB,GAClB,GAAI,EAAKnC,MAAM2B,eAAiB,EAAK3B,MAAM4B,iBAAkB,CACzD,IAAIgB,EAAW,IACF,WAATT,GAAqB,EAAKnC,MAAM4B,kBAEhB,QAATO,GAAkB,EAAKnC,MAAM2B,iBADpCiB,EAAW,EAAKV,YAAYnB,EAAGoB,IAInC,EAAKpC,SAAL,eACO6C,MAzDD,EA8DdS,cAAgB,SAACP,GACbK,SAASG,oBAAoB,YAAa,EAAKF,iBAC/C,EAAKrD,SAAS,CACV4B,eAAe,EACfC,kBAAkB,KAlEZ,EAsEd2B,SAAW,WACP,IAAI3C,EAAOuC,SAASK,eAAe,YAAYR,MAC/CpC,EAAK6C,OAAS,EACVC,eAAiBP,SAASK,eAAe,WAAzC,UAAwD5C,EAAxD,SACA8C,eAAiBP,SAASK,eAAe,WAAY,aA1E/C,EA6EdG,WAAa,WACT,EAAK5D,SAAS,CACV0B,QAAS,GACTC,WAAY,GACZG,KAAM,MACNC,KAAM,MACNC,QAAS,MACTC,QAAS,QAEbmB,SAASK,eAAe,WAAWR,MAAQ,GAC3CG,SAASK,eAAe,cAAcR,MAAQ,GAC9CG,SAASK,eAAe,YAAYR,MAAQ,GAC5CG,SAASK,eAAe,cAAcnD,MAAMuD,SAAW,OACvDT,SAASK,eAAe,mBAAmBnD,MAAMuD,SAAW,QA1FlD,EA6FdX,WAAa,SAACd,GACV,IAAI0B,EAAeV,SAASK,eAAerB,GAAM2B,WAAWC,QAAQf,MAChEgB,EAAa,EAAK1E,MAAM2E,KAAKC,MAC7BL,EAAeG,IACfb,SAASK,eAAerB,GAAM9B,MAAMuD,SAApC,UAAmDI,EAAaH,EAAgB,GAAhF,QA/FJ,EAAK7D,MAAL,eACOwB,GAHG,E,qDAqGJ,IAAD,OACCf,EAAQN,KAAKb,MAAM2E,KAGrBE,EADW,KADL1D,EAAMyD,MAAQzD,EAAMjB,QAIxB4E,EAAY,CACdC,WAAY,SACZT,SAAU,OACVU,cAAe,YACfC,KAAM,OACNC,OAAQ,OACRC,WAAY,QAGhB,OACI,6BACI,yBAAKtD,UAAU,KAAKL,QAAS,kBAAM,EAAKxB,MAAMoF,mBAA9C,kBAGA,yBAAKvD,UAAU,gBACX,yBAAKA,UAAU,kBACX,yBACIN,GAAG,UACHN,IAAK,SAACoE,GAAS,EAAKC,OAASD,GAC7BnF,OAAQ2E,EACRD,MAvBL,KAyBK,2BACI3D,IAAK,SAACoE,GACF,EAAKlF,SAAWkF,GAEpBE,UAAW1E,KAAKb,MAAM2E,KAAKvD,IAC3BlB,OAAQ2E,EACRD,MA/BT,MAkCK,0BACIrD,GAAG,aACHR,MAAK,2BAAO+D,GAAP,IAAkBU,OAAQ3E,KAAKH,MAAM2B,cAAgB,EAAI,IAC9DoD,EAAG5E,KAAKH,MAAM6B,KACdmD,EAAG7E,KAAKH,MAAM8B,KACdmD,iBAAiB,SACjBC,WAAW,SACXC,YAAa,SAACrC,GAAD,OAAW,EAAKI,gBAAgBJ,EAAO,QACpDsC,UAAW,SAACtC,GAAD,OAAW,EAAKO,cAAcP,EAAO,SAE/C3C,KAAKH,MAAMyB,SAGhB,0BACIZ,GAAG,kBACHR,MAAO+D,EACPa,iBAAiB,SACjBC,WAAW,SACXH,EAAG5E,KAAKH,MAAM+B,QACdiD,EAAG7E,KAAKH,MAAMgC,QACdmD,YAAa,SAACrC,GAAD,OAAW,EAAKI,gBAAgBJ,EAAO,WACpDsC,UAAW,SAACtC,GAAD,OAAW,EAAKO,cAAcP,EAAO,YAE/C3C,KAAKH,MAAM0B,aAGpB,yBAAKP,UAAU,aACX,2BACIA,UAAU,eACVgB,KAAK,OACLvB,KAAK,aACLC,GAAG,UACHwE,YAAY,sBACZC,SAAUnF,KAAK0C,aAGnB,2BACI1B,UAAU,eACVgB,KAAK,OACLvB,KAAK,kBACLC,GAAG,aACHwE,YAAY,yBACZC,SAAUnF,KAAK0C,aAEnB,2BACI1B,UAAU,eACVgB,KAAK,OACLtB,GAAG,WACHwE,YAAY,qBAGpB,yBAAKlE,UAAU,WACX,4BAAQL,QAASX,KAAKoD,SAAUpC,UAAU,mBAA1C,oBACA,4BAAQL,QAASX,KAAKwD,WAAYxC,UAAU,mBAA5C,SACA,4BAAQL,QAAS,kBAAM,EAAKxB,MAAMoF,kBAAkBvD,UAAU,mBAA9D,2B,GAjMNF,aCXDsE,E,4MACnBvF,MAAQ,CACNqB,OAAQ,GACRmE,SAAU,KACVC,YAAa,I,EAGfC,eAAiB,SAAC3E,GAChB,EAAKhB,SAAS,CACZ0F,YAAa,EAAKzF,MAAMqB,OAAOsE,MAAK,SAAAC,GAAC,OAAIA,EAAE/E,KAAOE,EAAE8E,OAAOhF,QAE7D,EAAK6D,kB,EAGPoB,aAAe,WACb,EAAK/F,SAAS,CAAEyF,UAAU,EAAMC,YAAa,EAAKzF,MAAMqB,OAAOxB,KAAKkG,MAAMlG,KAAKmG,SAAW,EAAKhG,MAAMqB,OAAOoC,Y,EAG9GwC,gBAAkB,WAChB,OAAI,EAAKjG,MAAMwF,SACN,kBAAC,EAAD,CAASvB,KAAM,EAAKjE,MAAMyF,YAAaf,eAAgB,EAAKA,iBAGjE,kBAAC,EAAD,CACEtD,aAAc,EAAK0E,aACnBzE,OAAQ,EAAKrB,MAAMqB,OACnBL,YAAa,EAAK0E,kB,EAY1BhB,eAAiB,WACf,EAAK3E,SAAS,CAAEyF,UAAW,EAAKxF,MAAMwF,Y,uDANtC,OAAO,6BACJrF,KAAK8F,qB,0CAQW,IAAD,OAClBC,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAAC9E,GACL,EAAKtB,SAAS,CAAEsB,OAAQA,EAAOiF,KAAKC,MAAMC,QAAO,SAACZ,GAAD,OAAuB,IAAhBA,EAAEa,sB,GA9CjCxF,aCFbyF,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9D,SAASK,eAAe,SDwGpB,kBAAmB0D,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.abca7d4a.chunk.js","sourcesContent":["import React from \"react\";\nexport default class Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      spans: 0,\n    }\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.imageRef.current.addEventListener('load', this.setSpans)\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n    const spans = Math.ceil(height / 10 + 2)\n    this.setState({ spans })\n  }\n\n  render() {\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\n        <img\n          ref={this.imageRef}\n          src={this.props.image.url}\n          alt={this.props.image.name}\n          id={this.props.image.id}\n          onClick={(e) => this.props.handleclick(e)}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Image from \"./Image\";\nimport \"./ImageList.css\"\n\nexport default class Gallery extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"h1\">\n          MEME MAKER\n        </div>\n\n        <div>\n          <button className=\"btn-gallery\" onClick={() => this.props.handleRandom()}>Random Meme</button>\n        </div>\n\n        <div className=\"image-list\">\n          {this.props.images.map((image) => {\n            return (\n              <Image\n                key={image.id}\n                image={image}\n                handleclick={this.props.handleclick}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Generator.css\";\nimport * as svg from \"save-svg-as-png\";\n\nconst initialState = {\n    toptext: \"\",\n    bottomtext: \"\",\n    isTopDragging: false,\n    isBottomDragging: false,\n    topX: \"50%\",\n    topY: \"10%\",\n    bottomX: \"50%\",\n    bottomY: \"90%\",\n};\n\nclass TempGen extends Component {\n    constructor() {\n        super();\n        this.state = {\n            ...initialState\n        };\n    }\n\n    getStateObj = (e, type) => {\n        let rect = this.imageRef.getBoundingClientRect();\n        const xOffset = e.clientX - rect.left;\n        const yOffset = e.clientY - rect.top;\n        let stateObj = {};\n        if (type === \"bottom\") {\n            stateObj = {\n                isBottomDragging: true,\n                isTopDragging: false,\n                bottomX: `${xOffset}px`,\n                bottomY: `${yOffset}px`,\n            };\n        } else if (type === \"top\") {\n            stateObj = {\n                isTopDragging: true,\n                isBottomDragging: false,\n                topX: `${xOffset}px`,\n                topY: `${yOffset}px`,\n            };\n        }\n        return stateObj;\n    };\n\n    changeText = (event) => {\n        this.setState({\n            [event.currentTarget.id]: event.currentTarget.value,\n        });\n        let type = event.currentTarget.name\n        this.resizeText(type)\n    };\n\n    handleMouseDown = (e, type) => {\n        const stateObj = this.getStateObj(e, type);\n        document.addEventListener(\"mousemove\", (event) =>\n            this.handleMouseMove(event, type)\n        );\n        this.setState({\n            ...stateObj,\n        });\n    };\n\n    handleMouseMove = (e, type) => {\n        if (this.state.isTopDragging || this.state.isBottomDragging) {\n            let stateObj = {};\n            if (type === \"bottom\" && this.state.isBottomDragging) {\n                stateObj = this.getStateObj(e, type);\n            } else if (type === \"top\" && this.state.isTopDragging) {\n                stateObj = this.getStateObj(e, type);\n            }\n            this.setState({\n                ...stateObj,\n            });\n        }\n    };\n\n    handleMouseUp = (event) => {\n        document.removeEventListener(\"mousemove\", this.handleMouseMove);\n        this.setState({\n            isTopDragging: false,\n            isBottomDragging: false,\n        });\n    };\n\n    saveMeme = () => {\n        let name = document.getElementById(\"memename\").value\n        name.length > 0 ?\n            svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), `${name}.png`) :\n            svg.saveSvgAsPng(document.getElementById(\"svg_ref\"), \"meme.png\")\n    };\n\n    resetBoxes = () => {\n        this.setState({\n            toptext: \"\",\n            bottomtext: \"\",\n            topX: \"50%\",\n            topY: \"10%\",\n            bottomX: \"50%\",\n            bottomY: \"90%\"\n        });\n        document.getElementById(\"toptext\").value = \"\";\n        document.getElementById(\"bottomtext\").value = \"\";\n        document.getElementById(\"memename\").value = \"\";\n        document.getElementById(\"tiptoptext\").style.fontSize = \"50px\"\n        document.getElementById(\"bittybottomtext\").style.fontSize = \"50px\"\n    }\n\n    resizeText = (type) => {\n        let currentWidth = document.getElementById(type).textLength.baseVal.value\n        let imageWidth = this.props.meme.width\n        if (currentWidth > imageWidth) {\n            document.getElementById(type).style.fontSize = `${(imageWidth / currentWidth) * 40}px`;\n        }\n    }\n\n    render() {\n        const image = this.props.meme;\n        var wrh = image.width / image.height;\n        var newWidth = 500;\n        var newHeight = newWidth / wrh;\n\n        const textStyle = {\n            fontFamily: \"Impact\",\n            fontSize: \"50px\",\n            textTransform: \"uppercase\",\n            fill: \"#FFF\",\n            stroke: \"#000\",\n            userSelect: \"none\"\n        };\n\n        return (\n            <div>\n                <div className=\"h1\" onClick={() => this.props.toggleSelected()}>\n                    MEME GENERATOR\n                </div>\n                <div className=\"main-content\">\n                    <div className=\"meme-gen-modal\">\n                        <svg\n                            id=\"svg_ref\"\n                            ref={(el) => { this.svgRef = el; }}\n                            height={newHeight}\n                            width={newWidth}\n                        >\n                            <image\n                                ref={(el) => {\n                                    this.imageRef = el;\n                                }}\n                                xlinkHref={this.props.meme.url}\n                                height={newHeight}\n                                width={newWidth}\n                            />\n\n                            <text\n                                id=\"tiptoptext\"\n                                style={{ ...textStyle, zIndex: this.state.isTopDragging ? 4 : 1 }}\n                                x={this.state.topX}\n                                y={this.state.topY}\n                                dominantBaseline=\"middle\"\n                                textAnchor=\"middle\"\n                                onMouseDown={(event) => this.handleMouseDown(event, \"top\")}\n                                onMouseUp={(event) => this.handleMouseUp(event, \"top\")}\n                            >\n                                {this.state.toptext}\n                            </text>\n\n                            <text\n                                id=\"bittybottomtext\"\n                                style={textStyle}\n                                dominantBaseline=\"middle\"\n                                textAnchor=\"middle\"\n                                x={this.state.bottomX}\n                                y={this.state.bottomY}\n                                onMouseDown={(event) => this.handleMouseDown(event, \"bottom\")}\n                                onMouseUp={(event) => this.handleMouseUp(event, \"bottom\")}\n                            >\n                                {this.state.bottomtext}\n                            </text>\n                        </svg>\n                        <div className=\"meme-form\">\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                name=\"tiptoptext\"\n                                id=\"toptext\"\n                                placeholder=\"Add text to the top\"\n                                onChange={this.changeText}\n                            />\n\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                name=\"bittybottomtext\"\n                                id=\"bottomtext\"\n                                placeholder=\"Add text to the bottom\"\n                                onChange={this.changeText}\n                            />\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                id=\"memename\"\n                                placeholder=\"Save meme as...\"\n                            />\n                        </div>\n                        <div className=\"buttons\">\n                            <button onClick={this.saveMeme} className=\"btn btn-primary\">Download Meme :D</button>\n                            <button onClick={this.resetBoxes} className=\"btn btn-primary\">Reset</button>\n                            <button onClick={() => this.props.toggleSelected()} className=\"btn btn-primary\">Back to Gallery</button>\n                        </div>\n                    </div>\n                </div >\n            </div>\n        );\n    }\n}\n\nexport default TempGen;\n","import React, { Component } from \"react\";\nimport Gallery from \"./Gallery\";\nimport TempGen from \"./TempGen\";\n\nexport default class App extends Component {\n  state = {\n    images: [],\n    selected: null,\n    selectedImg: [],\n  };\n\n  handleImgClick = (e) => {\n    this.setState({\n      selectedImg: this.state.images.find(i => i.id === e.target.id),\n    });\n    this.toggleSelected()\n  };\n\n  chooseRandom = () => {\n    this.setState({ selected: true, selectedImg: this.state.images[Math.floor(Math.random() * this.state.images.length)] })\n  }\n\n  toggleComponent = () => {\n    if (this.state.selected) {\n      return <TempGen meme={this.state.selectedImg} toggleSelected={this.toggleSelected} />;\n    } else {\n      return (\n        <Gallery\n          handleRandom={this.chooseRandom}\n          images={this.state.images}\n          handleclick={this.handleImgClick}\n        />\n      );\n    }\n  };\n\n  render() {\n    return <div>\n      {this.toggleComponent()}\n    </div>;\n  }\n\n  toggleSelected = () => {\n    this.setState({ selected: !this.state.selected })\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((r) => r.json())\n      .then((images) => {\n        this.setState({ images: images.data.memes.filter((i) => i.box_count === 2) });\n      });\n  }\n}\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n\n  window.location.hostname === '[::1]' ||\n\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n\n        checkValidServiceWorker(swUrl, config);\n\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n\n              console.log('Content is cached for offline use.');\n\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}